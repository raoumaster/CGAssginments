#include <stdio.h>
#include<unistd.h>
#include <pthread.h>

void *fibonacci() {
        int i, n;
        int t1 = 0, t2 = 1;
        int nextTerm = t1 + t2;
        printf("Enter the number of terms: ");
        scanf("%d", &n);
        printf("Fibonacci Series: %d, %d, ", t1, t2);

        for (i = 3; i <= n; ++i) {
                printf("%d, ", nextTerm);
                t1 = t2;
                t2 = nextTerm;
                nextTerm = t1 + t2;
        }
}

void *factorial() {
        int i,fact=1,number;
        printf("Enter a number: ");
        scanf("%d",&number);
        for(i=1;i<=number;i++){
                fact=fact*i;
        }
        printf("Factorial of %d is: %d",number,fact);
}

void *prime() {
        int n, i, flag = 0;
        printf("Enter a positive integer: ");
        scanf("%d", &n);

        if (n == 0 || n == 1)
                flag = 1;
        for (i = 2; i <= n / 2; ++i) {
                if (n % i == 0) {
                        flag = 1;
                        break;
                }
        }
        if (flag == 0)
                printf("%d is a prime number.", n);
        else
                printf("%d is not a prime number.", n);
}

int main(){
        pthread_t tid1;
        pthread_t tid2;
        pthread_t tid3;
        int c;
        printf("\t1. Fibonacci series.\n");
        printf("\t2. Factorial\n");
        printf("\t3. Prime.\n");
        printf("\t4. Exit.\n");

        while(1) {
        printf("\nEnter your choice:");
        scanf("%d",&c);

        switch(c) {
                case 1: pthread_create(&tid1, NULL, fibonacci, NULL);
                        pthread_join(tid1, NULL);
                        pthread_cancel(tid1);
                        break;
                case 2: pthread_create(&tid2, NULL, factorial, NULL);
                        pthread_join(tid2, NULL);
                        pthread_cancel(tid2);
                        break;
                case 3: pthread_create(&tid3, NULL, prime, NULL);
                        pthread_join(tid3, NULL);
                        pthread_cancel(tid3);
                        break;
                case 4: return 0;
                default: printf("Invalid choice.");
                }
        }
        return 0;
