#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>


int num[7] = {45,21,77,705,256,123,2};
char arr[][20] = {"threads", "assignment", "linux", "stacks"};

void *stringsort(){
        //BUBBLE SORT
        printf("Original Array\n");
        for(int i=0; i<4; i++){
                printf("%s ", arr[i]);
        }
        printf("\n");
        char temp[20];
        for(int i=0; i<4; i++){
                for(int j=0; j<4-1-i; j++){
                        if(strcmp(arr[j],arr[j+1]) > 0){
                                strcpy(temp, arr[j]);
                                strcpy(arr[j],arr[j+1]);
                                strcpy(arr[j+1], temp);
                        }
                }
        }
        printf("\n");
        printf("Sorted Array\n");
        for(int i=0; i<4; i++){
                printf("%s ", arr[i]);
        }
        printf("\n");

        //SELECTION SORT
        char minstr[30];
        for(int i=0; i<4; i++){
                int min_ind = i;
                strcpy(minstr, arr[i]);
                for(int j =i+1; j<4; j++){
                        if(strcmp(minstr, arr[j]) >0){
                                strcpy(minstr, arr[j]);
                                min_ind = j;
                        }
                }
                if(min_ind != i){
                        strcpy(temp, arr[i]);
                        strcpy(arr[i], arr[min_ind]);
                        strcpy(arr[min_ind], temp);
                }
        }
        printf("\nSelection sorted Strings..\n");
        for(int i=0; i<4; i++){
                printf("%s ", arr[i]);
        }
        printf("\n");


}

void *Intsort(){
        //BUBBLE SORT
        printf("Original Array\n");
        for(int i=0; i<7; i++){
                printf("%d ", num[i]);
        }
        printf("\n");
        int temp;
        for(int i=0; i<7-1; i++){
                for(int j=0; j<7-i-1; j++){
                        if(num[j]>num[j+1]){
                                temp = num[j];
                                num[j] = num[j+1];
                                num[j+1] = temp;
                        }
                }
        }
        printf("\n");
        printf("Sorted Array..\n");
        for(int i=0; i<7; i++){
                printf("%d ", num[i]);
        }
        printf("\n");

        //SELECTION SORT
        for(int i=0; i<7-1; i++){
                int min = i;
                for(int j=i+1; j<7; j++){
                        if(num[j] < num[min]){
                                min = j;
                        }
                }
                if(min != i){
                        int temp = num[min];
                        num[min] = num[i];
                        num[i] = temp;
                }
        }
        printf("\nSelection sorted Array...\n");
        for(int i=0; i<7; i++){
                printf("%d ",num[i]);
        }
        printf("\n");

}






int main(){
        int ch;
        pthread_t pid1;
        pthread_t pid2;
        printf("*******CHOICE******\n");
        printf("1.Integer sort\n2.String Sort\n3.Exit\n");
        while(1){
                printf("Enter choice: ");
                scanf("%d", &ch);
                switch(ch){
                        case 1:
                                {
                                        pthread_create(&pid1, NULL, Intsort, NULL);
                                        pthread_join(pid1, NULL);
                                        pthread_cancel(pid1);
                                        break;
                                }
                        case 2:
                                {
                                        pthread_create(&pid2, NULL, stringsort, NULL);
                                        pthread_join(pid2, NULL);
                                        pthread_cancel(pid2);
                                        break;
                                }
                        case 3:
                                {
                                        printf("Exit..\n");
                                        exit(0);
                                        break;
                                }
                        default:
                                {
                                        printf("Invalid Choice..\n");
                                        break;
                                }
                }
        }

}