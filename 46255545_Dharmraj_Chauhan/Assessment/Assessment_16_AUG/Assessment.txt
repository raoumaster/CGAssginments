#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define SIZE_STRUCTURE(x) sizeof(x)
#define NAME_SIZE 80
#define ADDRESS_SIZE 80

// Patient structure to store the patient name, age, address and phoneno
typedef struct {
    char *name;
    int age;
    char *address;
    long int phoneno;
} patient;

// To skip the next line
void ClearNewLines(void){
    int c;
    do{
        c = getchar();
    }
    while (c != '\n' && c != EOF);
}

// Taking input from the usre and store the data in the structure pointer ptr
patient *writeinfo(patient *ptr, int i){
    
    int patientAge = 0; //declare var to store student age
    long int patientPhoneno = 0; //declare var to store student roll number
    char patientName[NAME_SIZE] = {0}; //declare array to store student name
    char patientAdress[ADDRESS_SIZE] = {0}; //declare array to store student name
    
    // patientAge taking from the input
    printf("\nEnter the age\n");
    scanf("%d", &patientAge);
    (ptr+i)->age = patientAge;
    ClearNewLines();
    
    
    // patientPhoneno taking from the input
    printf("\nEnter the phone no\n");
    scanf("%ld", &patientPhoneno);
    (ptr+i)->phoneno = patientPhoneno;
    ClearNewLines();
    
    
    // patientName taking from the input
    printf("\nEnter the Name\n");
    fgets(patientName, NAME_SIZE, stdin);
    (ptr+i)->name = malloc(NAME_SIZE);
    if((ptr+i) == NULL){
        printf("Failed to Allocate Memory");
        return 0;
    }
    strncpy((ptr+i)->name, patientName, NAME_SIZE);
    
    
    // patientAdress taking from the input
    printf("\nEnter the adress\n");
    fgets(patientAdress, ADDRESS_SIZE, stdin);
    (ptr+i)->address = malloc(ADDRESS_SIZE);
    if((ptr+i) == NULL){
        printf("Failed to Allocate Memory");
        return 0;
    }
    strncpy((ptr+i)->address, patientAdress, ADDRESS_SIZE);
    
    
    // Assigning the file pointer and store the ptr data in temp pointer
    patient *temp = NULL;
    temp = malloc(SIZE_STRUCTURE(patient));
    memcpy(temp,(ptr+i),SIZE_STRUCTURE(patient));
    
    // To write the structure data to the file
    FILE * file= fopen("test.txt", "wb");
    if (file != NULL) {
        fwrite(&temp, SIZE_STRUCTURE(ptr+i), 4, file);
        fclose(file);
    }
    free(temp);
}

// For freed pointer funcation
void freefunc(patient *ptr){
    free(ptr);
    ptr = NULL;
}

// For display structure pointer
void display(patient *ptr, int n){
    printf("\nDisplaying Information:\n");
    for(int i = 0; i < n; ++i){
        printf("Name: %s\tAge: %d\tAdress: %s\tPhoneno: %ld\n", (ptr+i)->name, (ptr+i)->age, (ptr+i)->address, (ptr+i)->phoneno);
        // printf("Name: %s\tAge: %d\n", (ptr+i)->name, (ptr+i)->age);
    }
}

int main(){
    
    // A pointer funcation who holds the all values from user input.
    patient *ptr = NULL;
    int i, n;
    
    // Taking input from the user how many user details they want to enter.
    printf("\nEnter the no of patient you want to add:- \n");
    scanf("%d", &n);
    
    //Allocate & Validate memory for structure pointer
    ptr = malloc(n * SIZE_STRUCTURE(patient));  
    if (ptr == NULL)
        return 0;
    
    // Via loop store the data to the pointer <ptr>
    for(i = 0; i <n; i++){
        writeinfo(ptr, i);
    }
    
    // Display funcation to the display pointer store data
    display(ptr, n);
    
    // Free funcation to freed memory of the pointer
    freefunc(ptr);
}
