#include <stdio.h>
#include <string.h>
#include <stdlib.h>

 

#define STACK_SIZE 10
#define MAX_LENGTH 80
#define MAX_LINE 2048

 

/* 
This code is store string in the stack format. mean last in first out(LIFO) manner.
There main method containing 3 function:-

 

(1)push :- which push/place your(input queary) in stack manner.
(2)pop :- which remove the first line of the source file.
(3)display :- which display the content of the source file. 
*/

 

char item[MAX_LENGTH];

 

int isEmpty(const char *str){
    char ch;
    do{
        ch = *(str++);
        if(ch != '\n' && ch != '\0')
            return 0;
    } while (ch != '\0');
    return 1;
}

 

void removeEmptyLines(){
    char buffer[MAX_LENGTH];
    FILE *fptr = fopen("data.txt", "r");
    FILE *temp = fopen("delete.txt", "w");
    
    while ((fgets(buffer, MAX_LENGTH, fptr)) != NULL)
    {
        if(!isEmpty(buffer))
            fputs(buffer, temp);
    }
    fclose(fptr);
    fclose(temp);
    
    rename("delete.txt", "data.txt");
}
    
void push(char *item){
    
    FILE *fptr = fopen("data.txt", "r");
    FILE *temp = fopen("delete.txt", "w");
    
    int current_line = 1;
    char buffer[MAX_LENGTH];
    char myTxt[MAX_LENGTH];
    
    while ((fgets(buffer, sizeof(buffer), fptr)) != NULL)
    {
        if(current_line == 1){
            printf("Your enterd line is:- %s", item);
            fprintf(temp, "%s\n", item);
            fprintf(temp, "%s", buffer);
        } else { 
            printf("\nLine copying from another file:- %s", buffer);
            fprintf(temp, "%s", buffer);
        }
        current_line++;
    }
        
    fclose(fptr);
    fclose(temp);
    
    rename("delete.txt", "data.txt");
    
    removeEmptyLines();
}

 

void display(){
    FILE *rptr = fopen("data.txt", "r");
    if (rptr == NULL){
        printf("Cannot open file \n");
        exit(0);
    }
    char c = fgetc(rptr);
    while (c != EOF){
        printf ("%c", c);
        c = fgetc(rptr);
    }
    fclose(rptr);
}

 

void pop(){
    FILE *fptr = fopen("data.txt", "r");
    FILE *temp = fopen("delete.txt", "w");
    
    int current_line = 1;
    char buffer[MAX_LENGTH];
    char myTxt[MAX_LENGTH];
    
    while ((fgets(buffer, sizeof(buffer), fptr)) != NULL)
    {
        if(current_line == 1){
            printf("First line is passing");
        } else { 
            printf("\nAddeding into file this line:- %s", buffer);
            fputs(buffer, temp);
        }
        current_line++;
    }
        
    fclose(fptr);
    fclose(temp);
    
    rename("delete.txt", "data.txt");
}

 

int counter(){
    char buffer[MAX_LENGTH];
    FILE *fptr = fopen("data.txt", "r");
    size_t t_lines, s_line, length;
    s_line = 0;
    t_lines = 0;
    int i = 0, z = 0;
    
    while (fgets(buffer, MAX_LENGTH, fptr) != NULL) {
        t_lines++;
        i++;
        length = strlen(buffer);
        if (length > s_line){
            s_line = length;
            z = i;
        }
    }
    fclose(fptr);
    printf("%d no line is longest", z);
    
    return s_line;
}

 


int main(){
    
    char item[MAX_LENGTH];    
    int choice = 0;

 

    for(;;){
        printf("\n1. push,  2. pop,  3. Display,  4.Counting  5.Exit");
        printf("\nEnter the choice:- ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
                printf("Enter the item to be inserted:- ");
                FILE *sptr = fopen("src.txt", "r");
                while ((fgets(item, MAX_LENGTH, sptr)) != NULL){
                    push(item);
                }
                fclose(sptr);
                break;
            case 2:
                pop();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("\nMax length line:-%d", counter());
            default:
                exit(0);
        }
    }
    return 0;
}
