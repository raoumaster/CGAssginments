#include <stdio.h>
#include <pthread.h>
void *fib(){
        int n;
        printf("Enter the number: ");                                                                                                                                           scanf("%d", &n);
        int n1=0;
        int n2=1;
        int n3;
        while(n1<=n){
                printf("%d ", n1);
                n3 = n1+n2;
                n1=n2;
                n2=n3;
        }
}

void *fact(void *num){
        int n = *((int *)num);
        int fac = 1;
        for(int i=n; i>=1; i--){
                fac *= i;
        }
        printf("%d\n", fac);
}

void *prime(void *num){
        int n = *((int *)num);
        int c=0,i;
        for(i=1; i<=n; i++){
                if(n%i==0){
                        c += 1;
                }
        }
        if(c==2){
                printf("Prime\n");
        }
        else{
                printf("Not Prime\n");
        }
}



int main(){
        pthread_t tid1;
        pthread_t tid2;
        pthread_t tid3;
        int n,ch;
        printf("****CHOICE****\n1.Fibonacci\n2.Factorial\n3.Check Prime\n4.Exit\n");
        while(1)
        {
                printf("Enter the choice: ");
                scanf("%d", &ch);
                switch(ch){
                        case 1:
                                pthread_create(&tid1, NULL, fib, NULL);
                                pthread_join(tid1, NULL);
                                break;
                        case 2:
                                printf("Enter the number: ");
                                scanf("%d", &n);
                                pthread_create(&tid2, NULL, fact, (void *)&n);
                                pthread_join(tid2, NULL);
                                break;
                        case 3:
                                printf("Enter the number: ");
                                scanf("%d", &n);
                                pthread_create(&tid3, NULL, prime, (void *)&n);
                                pthread_join(tid3, NULL);
                                break;
                        case 4:
                                pthread_cancel(tid1);
                                pthread_cancel(tid2);
                                pthread_cancel(tid3);
                                return 0;
                        default:
                                printf("Invalid Choice\n");
                }
        }
}