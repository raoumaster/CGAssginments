
1)
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>

void *factorial()
{
        int n , num, res;
        printf("enter a integer: ");
        scanf("%d", &num);
        n = num;
        res = num;
        while(num>1)
        {
                res = res*(num-1);
                num = num-1;
        }
        printf("\nFactorial of %d is %d . \n\n",n,res);
}

void *fibbonici()
{
        int n1=0, n2=1, next =0,n;
        printf("enter the no of ele : \n");
        scanf("%d", &n);
        printf(" fibonacci : %d %d",n1,n2);
        next = n1+n2;
        while(next <= n)
        {
                printf("%d, ", next);
                n1 = n2;
                n2 = next;
                next = n1+n2;
        }
}
void *primeornot()
{
        int n,num,i,flag=0;
        printf("Enter any number : ");
        scanf("%d", &num);
        n = num;
        for(i =2;i<=n/2;i++)
        {
                if(num%i == 0)
                {
                        flag =1;
                        break;
                }
        }
            if (num==1)

                printf("\n1 is neither pirme or not");

        else
        {
                if(flag==0)
                        printf("\n%d is not prime\n\n",n);
                else
                        printf("\n%d is not a prime \n\n",n);
        }

}


int main()
{

        pthread_t thread1;
        pthread_t thread2;
        pthread_t thread3;
        int ch;
        while(ch!=0)
{
                printf("\n1.factorial series:\n");
                printf("\n2.fibbonoc: \n");
                printf("\n3.primeornot:\n");
                printf("\n4.Exit\n");
                printf(" enter your choice: ");
                scanf("%d",&ch);

                switch(ch)
                {
                        case 1: pthread_create(&thread1, NULL, factorial(), NULL);
                                pthread_join(thread1, NULL);
                                break;
                        case 2: pthread_create(&thread2, NULL, fibbonici(), NULL);
                                pthread_join(thread2, NULL);
                                break;
                        case 3: pthread_create(&thread3, NULL, primeornot(), NULL);
                                pthread_join(thread3, NULL);
                                break;
                        case 4: 
                                        if(thread1 == 0)
                                                pthread_cancel(thread1);
                                        if(thread2 == 0)
                                                pthread_cancel(thread2);
                                        if(thread3 == 0)
                                                pthread_cancel(thread3);
                                
                                return 0;
                        default:
                                printf("Invalid choice");
                }
        }

}