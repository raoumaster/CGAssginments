#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void *fibonacci()
{
        int n, sum, i;
        int a=0;
        int b=1;
        printf("Enter number of elements: ");
        scanf("%d", &n);
        printf("%d %d", a, b);
        while(i<n)
        {
                sum = a+b;
                printf("%d", sum);
                a = b;
                b = sum;
        }
}

void *factorial()
{
        int n, i;
        long int fact = 1;
        printf("Enter number : ");
        scanf("%d", &n);
        for(i = n; i>=1; i--)
        {
                fact *=i;
        }
        printf("Factorial of %d is: %ld\n",n,fact);
}

void *prime()
{
        int n, i, flag=0;
        printf("Enter the number to check : ");
        scanf("%d", &n);
        int j = n/2;
        for(i = 2; i<=j; i++)
        {
                if(n%i == 0)
                {
                        ++flag;
                        break;
                }
                else
                        continue;
        }
        if(flag>0)
                printf("Number is prime\n");
        else
                printf("Number is not prime\n");
}

int main()
{
        pthread_t tid1;
        pthread_t tid2;
        pthread_t tid3;
        int ch;
        do
        {
                printf("1. Fibonacci Series: \n");
                printf("2. Factorial of a number: \n");
                printf("3. Check whether number is prime or not. \n");
                printf("4. Exit \n");
                printf("Enter your choice : ");
                scanf("%d", &ch);
                switch(ch)
                {
                        case 1:
                                pthread_create(&tid1, NULL, fibonacci, NULL);
                                pthread_join(tid1, NULL);
                                break;
                        case 2:
                                pthread_create(&tid2, NULL, factorial, NULL);
                                pthread_join(tid2, NULL);
                                break;
                        case 3:

                                pthread_create(&tid3, NULL, prime, NULL);
                                pthread_join(tid3, NULL);
                                break;
                        case 4:
                                pthread_cancel(tid1);
                                pthread_cancel(tid2);
                                pthread_cancel(tid3);
                                printf("Exit Successful\n");
                                return EXIT_SUCCESS;
                        default:
                                printf("Invalid Choice");
                                break;
                }
        }while(ch != 4);
        return 0;
}
