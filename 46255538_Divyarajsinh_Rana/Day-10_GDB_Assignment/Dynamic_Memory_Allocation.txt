/* C Program -> Dynamic Memory Allocation Assignment */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 30
#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1

// C function to count words in string using and tokenise using strtok()
int wordCount(char string[]){
  
   char string[], *token;
   int count = 0;
  
   token = strtok(string, " ");
     
   while(NULL != token) 
   {
       count++;
       token = strtok(NULL, " ");
   }
   return count;
}

//C function to store words in heap using calloc()
char** storeWords(char inputString[], int count){
    char **word_strings;
    word_strings = calloc(count, sizeof(char *));   //allocating memory to array of strings
    
    int i = 0;
    char *token = strtok(inputString, " ");
    
    while(token != NULL) {
        word_strings[i] = calloc(strlen(token), sizeof(char));   //allocating memory to strings
        strcpy(word_strings[i], token);
        i++;
        token = strtok(NULL, " ");
    }
    return word_strings;
}

// C function to search and replace a word from a given input string
int search_replace(char** word_strings, int count) {
    char search[20], replace[20];
    
    printf("\nEnter the word you want to be search:");
    scanf("%s", search);
    
    printf("\nEnter the word you want to be replace:");
    scanf("%s", replace);
    
    for(int  i = 0; i < count; i++) {
        if(strcmp(word_strings[i], search) == 0){
            strcpy(word_strings[i], replace);
            return EXIT_SUCCESS;
        }
    }
    return EXIT_FAILURE;
}

//C function to traverse and display all words stored

void display(char** word_strings, int count){
    for(int  i = 0; i < count; i++)
        printf("%s\n", word_strings[i]);
}

// C function to free all the allocated memory

void free(char** word_strings, int count){
    for(int  i = 0; i < count; i++)
        free(word_strings[i]);
    free(word_strings);
}

// C function to replace all occurences of given input word if present in the input string 
int replaceALL(char** word_strings, int count) {
    char search[20], replace[20];
    int flag = 0;
    
    printf("\nEnter the word you want to be search for replacing all occurrences:");
    scanf("%s", search);
    
    printf("\nEnter the word you want to be replace for replacing all occurrences:");
    scanf("%s", replace);
    
    for(int  i = 0; i < count; i++) {
        if(strcmp(word_strings[i], search) == 0){
            strcpy(word_strings[i], replace);
            flag = 1;
        }
    }
    if(flag == 1)
        return EXIT_SUCCESS;
    return EXIT_FAILURE;
}

int main()
{
    char inputString[MAX], string[MAX];
    char **word_strings;
    int count;
    
    printf("\n Enter string from user:");
    fgets(inputString, MAX, stdin); //take input string from user
    strcpy(string, inputString);
    
    count = wc(string);  //count words in string
    printf(" Total number of words in string: %d\n", count);
    
    printf("\n Words are storing into heap...\n");
    word_strings = storeWords(inputString, count);  //store words into heap
    printf("\n Storing into heap done!\n");
    
    //searching & replacing only first occurrence
    if(search_replace(word_strings, count) == 0) 
        printf("\nSearch word is found and replace first occurrence only!\n");
    else
        printf("\nSearch word not found in text.\n");
    
    printf("\nArray of strings after replacing first occurrence:\n");
    display(word_strings, count);    //display array of strings
    
    //searching & replacing all occurrences
    if(replaceALL(word_strings, count) == 0) 
        printf("\nSearch word is found and replace all occurrences!\n");
    else
        printf("\nSearch word not found in text.\n");
    
    printf("\nArray of strings after replacing all occurrences:\n");
    display(word_strings, count);    //display array of strings
    
    //free all allocated memory
    free(word_strings, count);
    printf("\nMemory freed.\n");
    
    return 0;
}
