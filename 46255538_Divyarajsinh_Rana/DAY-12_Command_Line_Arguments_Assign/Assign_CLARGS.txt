/* C program to write an application to read atleast 3 or more command line arguments, 
 * where every argument consists of servername and port number (0-1023) pair separated by a colon.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define RANGE 1023
#define MAX_LEN 30

#define EXIT_SUCCESS 0
#define EXIT_FAILURE 1

//validating inputs using command line args

int ip_val(char *ip)
{
        char *sname = NULL;
        char *portnumber = NULL;
        char t[MAX_LEN];
        int portNo;

        int serverlen;
        int portlen;

        int f1=1, f2=1;

        strcpy(t,ip);
        
        //tokenising servername and portnumber
        
        sname = strtok(t, ":");
        //printf("Server name: %s",servername);
        portnumber = strtok(NULL, ":");
        //printf("Port number: %s",portnumber);
        serverlen = strlen(sname);
        portlen = strlen(portnumber);

        //isaplha() function to validate the servername
        for(int i=0; i<serverlen; i++)
        {
                if(!isalpha(sname[i]))
                {
                        f1 = 0;
                        break;
                }
        }
        
        
        //isdigit() function to validate the portnumber
        for(int i=0; i<portlen; i++)
        {
                if(!isdigit(portnumber[i]))
                {
                        f2 = 0;
                        break;
                }
        }
      
        //whether the portnumber is in range
        if(f1 && f2)
        {
                if(atoi(portnumber)>0 && atoi(portnumber) <= RANGE)
                {
                        return(EXIT_FAILURE);
                }
        }
        return(EXIT_SUCCESS);
}

// display function for servername and portnumber
char *display_func(char *ip)
{
        char t[MAX_LEN];
        char *servername = NULL;
        char *portnumber = NULL;
        char *name = NULL;
        int serverlen;

        strcpy(t, ip);
        servername = strtok(t, ":");
        portnumber = strtok(NULL, ":");

        printf("\n Server name: %s\t Port number: %s\n", servername, portnumber);
        name = (char *)calloc((serverlen + 1), sizeof(char)); //allocating memory
        strcpy(name, servername);
        return name;
}

//driver main() function
int main(int argc, char *argv[])
{
        int i, val;
        char *fstr[MAX_LEN];
        char *name = NULL;
        char s[MAX_LEN];
      
        // to check whether arguments are more than 4 
        if(argc < 3)
        {
                printf("\n Less number of arguments passed!");
                exit(EXIT_FAILURE);
        }

        for(i=1; i<argc; i++)
        {
                val = ip_val(argv[i]);
                if(val == 1)
                {
                        exit(EXIT_FAILURE);
                }
                printf("\n Displaying fucntion 2: ");
                name = display_func(argv[i]);
                fstr[i] = name;
        }

        for(i=1; i<argc; i++)
        {
                printf("\n printf: %s",fstr[i]);
        }

        printf("\n Hi there!");
        for(int i=0; i<argc; i++)
        {
                printf("free: %s\n", fstr[i]);
                free(fstr[i]); //freeing memory
        }

        printf("\n sizeof: %ld", sizeof(fstr)); 
        return 0;
}
