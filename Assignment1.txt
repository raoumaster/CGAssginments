#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>

void *fibonacci()
{
        int n,sum;
        int a=0;
        int b=1;
        printf("\nEnter a positive integer:");
        scanf("%d", &n);
        printf("Fibonacci series upto %d is: \n",n);
        printf("%d %d ", a, b);
        sum=a+b;
        while(sum<=n)
        {
                printf("%d ", sum);
                a=b;
                b=sum;
                sum=a+b;
        }
        printf("\n");
}

void *factorial()
{
        int n,i;
        long int fact=1;
        printf("\nEnter a number:");
        scanf("%d", &n);
        for(i=n; i>=1; i--)
        {
                fact *=i;
        }
        printf("Factorial of %d is: %ld \n", n, fact);
}

void *prime()
{
        int n,i,flag=0;
        printf("\nEnter the number to check:");
        scanf("%d", &n);
        int j=n/2;
        for(i=2; i<=j; i++)
        {
                if(n%i ==0)
                {
                        ++flag;
                        break;
                }
                else
                        continue;
        }
        if (flag>0)
                printf("Number is not prime \n");
        else
                printf("Number is prime \n");
}
int main()
{
        pthread_t tid1;
        pthread_t tid2;
        pthread_t tid3;
        int ch;
        do
        {
                printf("\nSelect from the options:\n");
                printf("1. Fibonacci Series: \n");
                printf("2. Factorial of a number: \n");
                printf("3. Check weather prime or not: \n");
                printf("4. Exit \n");
                printf("\nEnter your choice:");
                scanf("%d",&ch);
                switch(ch)
                {
                        case 1:pthread_create(&tid1, NULL, fibonacci, NULL);
                               pthread_join(tid1, NULL);
                               pthread_cancel(tid1);
                               break;
                        case 2:pthread_create(&tid2, NULL, factorial, NULL);
                               pthread_join(tid2, NULL);
                               pthread_cancel(tid2);
                               break;
                        case 3:pthread_create(&tid3, NULL, prime, NULL);
                               pthread_join(tid3, NULL);
                               pthread_cancel(tid3);
                               break;
                        case 4:printf("Exit Successful \n");
                               return EXIT_SUCCESS;
                        default : printf("Invalid Choice\n\n");
                                  break;
                }
        }
        while(ch !=4);
        return 0;
}