/* Program 
to count and display word count in input string
to extract and store words in heap. Should allocate memory for each word as per its length
to prompt, read a search word and replace word, traverse stored words and perform search-replace on first word
to free all the allocated memory.*/


#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define MAX 80

char text[MAX]; // User Input
int count = 1; //Number of Words
int i = 0; //Iterator
int j = 0; // Iterator for Words in Array of Strings
int length; //Length of word

int compare(char first[], char second[])
{
    int flag = 0; //Flag to check the comparision
    int k = 0; // Iterator for Comparision
    while(first[k] != '\0' && second[k] != '\0')
    {
        if(first[k] != second[k])
        {
            flag = 1;
            break;
        }
        k++;
    }
    if(flag == 0)
    {   
        return 0;
    }
    else
    {
        return 1;
    }
}

void search_replace(char **strings, int count)
{
    char search[50];
    char replace[50];
    printf("Enter the word to be searched: ");
    scanf("%s",search);
    printf("Enter the Word to be replaced: ");
    scanf("%s",replace);
    for(int m = 0; m < count; m++)
    {
        if(compare(strings[m],search) == 0)
        {
            strcpy(strings[m],replace);
        }
    }
    for(int n = 0; n < count; n++)
    {
        printf("%s\n",strings[n]);
    }
}

void freeMemory(char **strings, int count)
{
    for(int m = 0; m < count; m++)
    {
        free(strings[m]);
    }
    free(strings);
}

int main()
{
    printf("Enter the text:");
    fgets(text, MAX, stdin);
    while(text[i] != '\0')
    {
        if(text[i] == ' ')
        {
            count++;
        }
        i++;
    }
    // printf("%d",count);

    char **strings;
    strings = calloc(count,sizeof(char *));
    
    char *token = strtok(text," ");
    while(token != NULL)
    {
        strings[j] = calloc(strlen(token), sizeof(char));
        strcpy(strings[j], token);
        printf("%s\n",strings[j]);
        // printf("%s\n",strings[j],(strings + j));
        j++;
        token = strtok(NULL, " ");
    }
    search_replace(strings, count);
    freeMemory(strings, count);
    return 0;
}
