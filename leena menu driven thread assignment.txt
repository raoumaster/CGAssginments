#include <stdio.h>
#include <pthread.h>

void *fibonacci()
{
        int n1=0,n2=1,n3,i,number;
        printf("Enter the number of elements:");
        scanf("\n %d",&number);
        printf("\n %d\t %d\t",n1,n2);
        for(i=2;i<number;++i)
        {
                n3=n1+n2;
                printf("%d\t",n3);
                n1=n2;
                n2=n3;
        }
}

void *factorial()
{
        int x,fact=1,n;
        printf("enter the number to find factorial:");
        scanf("%d",&n);
        for(x=1;x<=n;x++)
                fact=fact*x;
        printf("factorial of %d is %d",n ,fact);
}

void *prime()
{
        int n,i,m=0,flag=0;
        printf("enter the number to check prime:");
        scanf("%d",&n);
        m=n/2;
        for(i=2;i<=m;i++)
        {
                if(n%i==0)
                {
                        printf("\n number is not prime");
                        flag=1;
                        break;
                }
        }
        if(flag==0)
                printf("\n number is prime");
}

int main()
{
        pthread_t tid[3];
        int err_no[3];
        int i=1;
        printf("1.Fibonacci\n");
        printf("2.Factorial\n");
        printf("3.Prime\n");
        printf("4.Exit\n");
        while(i)
        {
                printf("\n enter choice:");
                scanf("%d",&i);
                switch(i)
                {
                        case 1: err_no[0] = pthread_create(&tid1,NULL,fibonacci,NULL);
                                pthread_join(tid1,NULL);
                                break;
                        case 2: err_no[1] = pthread_create(&tid2,NULL,factorial,NULL);
                                pthread_join(tid2,NULL);
                                break;
                        case 3: err_no[2] = pthread_create(&tid3,NULL,prime,NULL);
                                pthread_join(tid3,NULL);
                                break;
                        case 4: for(int i=0;i<3;i++)
                                    if(err_no[i]==0)
                                       pthread_cancel(tid[i]); 
                                return 0;
                        default:
                                printf("invalid option\n");
                }
        }
        return 0;
}
